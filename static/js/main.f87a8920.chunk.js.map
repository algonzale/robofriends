{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","src_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","robot","toLowerCase","includes","length","src_SearchBox","src_Scroll","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,EAZH,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,GAC1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BP,EAA1B,cACjBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCYGS,EAjBC,SAAAX,GAAe,IAAZY,EAAYZ,EAAZY,OACjB,OACER,EAAAC,EAAAC,cAAA,WAECM,EAAOC,IAAI,SAACC,EAAMC,GACd,OACCX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKF,EACXZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCGZgB,EAbE,SAAAlB,GAAkCA,EAA/BmB,YAA+B,IAAlBC,EAAkBpB,EAAlBoB,aAC/B,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCCDI,SARD,SAACC,GACd,OACErB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,YC0CIC,cAxCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcDI,eAAgB,SAACC,GACfR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1CZ,EAAKa,MAAQ,CACXjC,OAAQ,GACR8B,YAAa,IAJHV,mFAQM,IAAAc,EAAAX,KAClBY,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAK,OAAGL,EAAKL,SAAS,CAAC7B,OAAQuC,uCAQ9B,IAAAC,EAAAjB,KACFkB,EAAiBlB,KAAKU,MAAMjC,OAAO0C,OAAO,SAAAC,GAC7C,OAAOA,EAAMtD,KAAKuD,cAAcC,SAASL,EAAKP,MAAMH,YAAYc,iBAElE,OAAiC,IAA7BrB,KAAKU,MAAMjC,OAAO8C,OACbtD,EAAAC,EAAAC,cAAA,wBAGLF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACqD,EAAD,CAAWvC,aAAce,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACsD,EAAD,KACExD,EAAAC,EAAAC,cAACuD,EAAD,CAAUjD,OAAQyC,aAhCZS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAAUC,SAASC,eAAe,SDsH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.f87a8920.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card =({ name, email, id })=> {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t  <img alt=\"Robot\" src={`https://robohash.org/${id}?150x150`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList =({ robots })=> {\r\n  return (\r\n    <div>\r\n\t  {\r\n\t    robots.map((user, i) => {\r\n  \t      return (\r\n  \t      \t<Card key={i}\r\n  \t      \tid={robots[i].id} \r\n  \t      \tname={robots[i].name} \r\n  \t      \temail={robots[i].email}/>\r\n  \t      );\r\n        })\r\n\t  }\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from \"react\";\r\n\r\nconst SearchBox =({ searchField, searchChange })=> {\r\n  return (\r\n  \t<div className=\"pa2\">\r\n  \t  <input \r\n  \t  className=\"pa3 ba b--green bg-lightest-blue\"\r\n  \t  type=\"search\" \r\n  \t  placeholder=\"Search Robots\" \r\n  \t  onChange ={searchChange}\r\n  \t  />\r\n  \t</div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll =(props)=> {\r\n\treturn (\r\n\t  <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\r\n\t  \t{props.children}\r\n\t  </div>\r\n\t);\r\n} \r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from \"./CardList\";\r\nimport SearchBox from \"./SearchBox\"\r\nimport \"./App.css\"\r\nimport Scroll from \"./Scroll.js\"\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n  \tsuper();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    }  \r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(users=> this.setState({robots: users}))\r\n    \r\n  }\r\n\r\n  onSearchChange =(event)=> {\r\n    this.setState({ searchfield: event.target.value });\r\n  }\r\n\r\n  render() {\r\n  \tconst filteredRobots = this.state.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n    })\r\n    if (this.state.robots.length === 0) {\r\n      return <h1>Loading...</h1>\r\n    } else {\r\n        return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(<App  />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}